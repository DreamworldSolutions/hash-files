// headings were generated by http://patorjk.com/software/taag/#p=display&f=Colossal&t=ValidateResponse
var assert = require('assert'),
	rewire = require('rewire'),
	_ = require('underscore'),
	sha1 = require('sha1'),
	md5 = require('MD5'),
	hashDirContents = rewire('../lib/hash'),
	mockFiles = {
		'a/directory/': null,
		'z_file1.txt': 'some content',
		'some/dir/file2.txt': 'some more content'
	},
	expectedRawContents = mockFiles['some/dir/file2.txt'] + mockFiles['z_file1.txt'];
	expectedContentsSha1 = sha1(expectedRawContents),
	expectedContentsMd5 = md5(expectedRawContents),
	failGlobbing = false,
	failReadFiles = false;


hashDirContents.__set__('glob', function(dir, options, cb) {
	if (failGlobbing) {
		return cb(new Error());
	}
	cb(null, _.keys(mockFiles));
});

hashDirContents.__set__('fs', {
	readFiles: function(files, cb) {
		if (failReadFiles) {
			return cb(new Error());
		}
		var data = {};
		files.forEach(function(file) {
			data[file] = mockFiles[file];
		});
		cb(null, data);
	}
});

describe('hash-dir-contents Unit Tests', function() {

	beforeEach(function() {
		failGlobbing = false;
		failReadFiles = false;
	});

	it('should hash contents of directory with defaults', function(done) {
		hashDirContents(function(err, hash) {
			assert(!err);
			assert(hash === expectedContentsSha1);
			done();
		});
	});

	it('should hash contents of directory with options set', function(done) {
		hashDirContents({ directory: '/some/root', algorithm: 'md5' }, function(err, hash) {
			assert(!err);
			assert(hash === expectedContentsMd5);
			done();
		});
	});

	it('should throw an error if params are missing', function(done) {
		assert.throws(hashDirContents, /Missing or invalid/);
		done();
	});

	it('should throw an error if unknown algorithm', function(done) {
		assert.throws(function() {
			hashDirContents({ algorithm: 'fnord' }, function(err, hash) {});
		}, /Inavlid algorithm/);
		done();
	});

	it('should return error if globbing fails', function(done) {

		failGlobbing = true;

		hashDirContents(function(err, hash) {
			assert(err);
			assert(!hash);
			done();
		});
	});

	it('should return error if readFiles fails', function(done) {

		failReadFiles = true;

		hashDirContents(function(err, hash) {
			assert(err);
			assert(!hash);
			done();
		});
	});

});